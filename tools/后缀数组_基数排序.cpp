/*
 * POJ 1743 Musical Theme
 * 有N(1 <= N <=20000)个音符的序列来表示一首乐曲，每个音符都是1..88范围内的整数，现在要找一个重复的主题。
 * "主题"是整个音符序列的一个子串，它需要满足如下条件：
 * 1.长度至少为5个音符
 * 2.在乐曲中重复出现(可能经过转调，"转调"的意思是主题序列中每个音符都被加上或减去了同一个整数值。)
 * 3.重复出现的同一主题不能有公共部分。
 * 先转化成相邻两项的差值，然后就是找不可重叠重复子串。
 * 做法就是二分答案LEN
 * 然后根据height值进行分组
 */

#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <string.h>
using namespace std;
const int MAXN=20010;

/*
*suffix array
*倍增算法  O(n*logn)
*待排序数组长度为n,放在0~n-1中，在最后面补一个0
*build_sa( ,n+1, );//注意是n+1;
*getHeight(,n);
*例如：
*n   = 8;
*num[]   = { 1, 1, 2, 1, 1, 1, 1, 2, $ };注意num最后一位为0，其他大于0
*rank[]  = { 4, 6, 8, 1, 2, 3, 5, 7, 0 };rank[0~n-1]为有效值，rank[n]必定为0无效值
*sa[]    = { 8, 3, 4, 5, 0, 6, 1, 7, 2 };sa[1~n]为有效值，sa[0]必定为n是无效值
*height[]= { 0, 0, 3, 2, 3, 1, 2, 0, 1 };height[2~n]为有效值
*
*/

int sa[MAXN];//SA数组，表示将S的n个后缀从小到大排序后把排好序的
             //的后缀的开头位置顺次放入SA中
int t1[MAXN],t2[MAXN],c[MAXN];//求SA数组需要的中间变量，不需要赋值
int rank[MAXN],height[MAXN];
//待排序的字符串放在s数组中，从s[0]到s[n-1],长度为n,且最大值小于m,
//除s[n-1]外的所有s[i]都大于0，r[n-1]=0
//函数结束以后结果放在sa数组中
void build_sa(int s[],int n,int m)	//n为数组长度+1，m为基数，就是可能出现的字符种类
{
    int i,j,p,*x=t1,*y=t2;
    //第一轮基数排序，如果s的最大值很大，可改为快速排序
    for(i=0;i<m;i++)c[i]=0;
    for(i=0;i<n;i++)c[x[i]=s[i]]++;
    for(i=1;i<m;i++)c[i]+=c[i-1];
    for(i=n-1;i>=0;i--)sa[--c[x[i]]]=i;
    for(j=1;j<=n;j<<=1)
    {
        p=0;
        //直接利用sa数组排序第二关键字
        for(i=n-j;i<n;i++)y[p++]=i;//后面的j个数第二关键字为空的最小
        for(i=0;i<n;i++)if(sa[i]>=j)y[p++]=sa[i]-j;
        //这样数组y保存的就是按照第二关键字排序的结果
        //基数排序第一关键字
        for(i=0;i<m;i++)c[i]=0;
        for(i=0;i<n;i++)c[x[y[i]]]++;
        for(i=1;i<m;i++)c[i]+=c[i-1];
        for(i=n-1;i>=0;i--)sa[--c[x[y[i]]]]=y[i];
        //根据sa和x数组计算新的x数组
        swap(x,y);
        p=1;x[sa[0]]=0;
        for(i=1;i<n;i++)
            x[sa[i]]=y[sa[i-1]]==y[sa[i]] && y[sa[i-1]+j]==y[sa[i]+j]?p-1:p++;
        if(p>=n)break;
        m=p;//下次基数排序的最大值
    }
}
void getHeight(int s[],int n)
{
    int i,j,k=0;
    for(i=0;i<=n;i++)rank[sa[i]]=i;
    for(i=0;i<n;i++)
    {
        if(k)k--;
        j=sa[rank[i]-1];
        while(s[i+k]==s[j+k])k++;
        height[rank[i]]=k;
    }
}
int s[MAXN];
bool check(int n,int k)
{
    int Max=sa[1],Min=sa[1];
    for(int i=2;i<=n;i++)
    {
        if(height[i]<k)Max=Min=sa[i];
        else
        {
            if(sa[i]<Min)Min=sa[i];
            if(sa[i]>Max)Max=sa[i];
            if(Max-Min>k)return true;
        }
    }
    return false;
}
int main()
{
    //freopen("in.txt","r",stdin);
    //freopen("out.txt","w",stdout);
    int n;
    while(scanf("%d",&n)==1 && n)
    {
        for(int i=0;i<n;i++)scanf("%d",&s[i]);
        for(int i=n-1;i>0;i--)s[i]=s[i]-s[i-1]+90;
        n--;//减少一个长度
        for(int i=0;i<n;i++)s[i]=s[i+1];
        s[n]=0;
        build_sa(s,n+1,200);
        getHeight(s,n);
        int ans=-1;
        int l=1,r=n/2;
        while(l<=r)
        {
            int mid=(l+r)/2;
            if(check(n,mid))
            {
                ans=mid;
                l=mid+1;
            }
            else r=mid-1;
        }
        if(ans<4)printf("0\n");
        else printf("%d\n",ans+1);
    }
    return 0;
}
