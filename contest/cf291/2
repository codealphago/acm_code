#include<iostream>
#include<cstdio>
using namespace std;
const int MOD=1e9+7;
#define LL __int64
struct Matrix
{
    LL a[105][105];	//
    int n,m;
    Matrix(int _n=0,int _m=0,LL val=0)
    {
        n=_n; m=_m;
        for(int i=0;i<n;i++)
            for(int j=0;j<m;j++)
                a[i][j]=(i==j?val:0);
    }
    void print()
    {
        for(int i=0;i<n;i++,puts(""))
            for(int j=0;j<m;j++)
                cout<<a[i][j]<<' ';
        puts("");
    }
    Matrix operator *(Matrix tmp)
    {
        Matrix ret(n,tmp.m);
        for(int i=0;i<n;i++)
            for(int j=0;j<tmp.m;j++)
                for(int k=0;k<m;k++)
                    ret.a[i][j]=(ret.a[i][j]+a[i][k]*tmp.a[k][j])%MOD;	//
        return ret;
    }
    Matrix operator ^(LL b)
    {
        Matrix ret(n,m,1),base=(*this);
        while(b)
        {
            if(b&1) ret=ret*base;
            b>>=1;
            base=base*base;
        }
        return ret;
    }
};
int tab[105],dp[105];
int main(){
	int n,x;
	scanf("%d%d",&n,&x);
	int d;
	Matrix m0=Matrix(1,100);
	Matrix p=Matrix(100,100);
	for(int i=0;i<n;++i){
		scanf("%d",&d);
		++tab[d];
		//++m0.a[d];
		p.a[100-d][99]=1;
	}
	dp[0]=1;
	for(int i=1;i<=100;++i){
		for(int j=1;j<=i;++j){
			dp[i]=(dp[i]+tab[j]*dp[i-j])%MOD;
		}
		m0.a[i-1]=dp[i];
	}
	m0.print();
	for(int i=1;i<100;++i){
		p.a[i][i-1]=1;
	}
	return 0;
}
